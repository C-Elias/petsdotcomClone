{"ast":null,"code":"import getRole from \"./getRole.mjs\";\n/**\n * Safe Element.localName for all supported environments\n * @param element\n */\n\nexport function getLocalName(element) {\n  var _element$localName;\n  return (\n    // eslint-disable-next-line no-restricted-properties -- actual guard for environments without localName\n    (_element$localName = element.localName) !== null && _element$localName !== void 0 ? _element$localName :\n    // eslint-disable-next-line no-restricted-properties -- required for the fallback\n    element.tagName.toLowerCase()\n  );\n}\nexport function isElement(node) {\n  return node !== null && node.nodeType === node.ELEMENT_NODE;\n}\nexport function isHTMLTableCaptionElement(node) {\n  return isElement(node) && getLocalName(node) === \"caption\";\n}\nexport function isHTMLInputElement(node) {\n  return isElement(node) && getLocalName(node) === \"input\";\n}\nexport function isHTMLSelectElement(node) {\n  return isElement(node) && getLocalName(node) === \"select\";\n}\nexport function isHTMLTableElement(node) {\n  return isElement(node) && getLocalName(node) === \"table\";\n}\nexport function isHTMLTextAreaElement(node) {\n  return isElement(node) && getLocalName(node) === \"textarea\";\n}\nexport function safeWindow(node) {\n  var _ref = node.ownerDocument === null ? node : node.ownerDocument,\n    defaultView = _ref.defaultView;\n  if (defaultView === null) {\n    throw new TypeError(\"no window available\");\n  }\n  return defaultView;\n}\nexport function isHTMLFieldSetElement(node) {\n  return isElement(node) && getLocalName(node) === \"fieldset\";\n}\nexport function isHTMLLegendElement(node) {\n  return isElement(node) && getLocalName(node) === \"legend\";\n}\nexport function isHTMLSlotElement(node) {\n  return isElement(node) && getLocalName(node) === \"slot\";\n}\nexport function isSVGElement(node) {\n  return isElement(node) && node.ownerSVGElement !== undefined;\n}\nexport function isSVGSVGElement(node) {\n  return isElement(node) && getLocalName(node) === \"svg\";\n}\nexport function isSVGTitleElement(node) {\n  return isSVGElement(node) && getLocalName(node) === \"title\";\n}\n/**\n *\n * @param {Node} node -\n * @param {string} attributeName -\n * @returns {Element[]} -\n */\n\nexport function queryIdRefs(node, attributeName) {\n  if (isElement(node) && node.hasAttribute(attributeName)) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- safe due to hasAttribute check\n    var ids = node.getAttribute(attributeName).split(\" \");\n    return ids.map(function (id) {\n      return node.ownerDocument.getElementById(id);\n    }).filter(function (element) {\n      return element !== null;\n    } // TODO: why does this not narrow?\n    );\n  }\n\n  return [];\n}\nexport function hasAnyConcreteRoles(node, roles) {\n  if (isElement(node)) {\n    return roles.indexOf(getRole(node)) !== -1;\n  }\n  return false;\n}","map":{"version":3,"mappings":"AAAA,OAAOA,OAAP,MAAoB,eAApB;AAEA;;;;;AAIA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAAgD;EAAA;EACtD;IACC;IADD,sBAECA,OAAO,CAACC,SAFT;IAGC;IACAD,OAAO,CAACE,OAAR,CAAgBC,WAAhB;EAAA;AAED;AAED,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAuD;EAC7D,OAAOA,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAACC,QAAL,KAAkBD,IAAI,CAACE,YAA/C;AACA;AAED,OAAO,SAASC,yBAAT,CACNH,IADM,EAE4B;EAClC,OAAOD,SAAS,CAACC,IAAD,CAAT,IAAmBN,YAAY,CAACM,IAAD,CAAZ,KAAuB,SAAjD;AACA;AAED,OAAO,SAASI,kBAAT,CACNJ,IADM,EAEqB;EAC3B,OAAOD,SAAS,CAACC,IAAD,CAAT,IAAmBN,YAAY,CAACM,IAAD,CAAZ,KAAuB,OAAjD;AACA;AAED,OAAO,SAASK,mBAAT,CACNL,IADM,EAEsB;EAC5B,OAAOD,SAAS,CAACC,IAAD,CAAT,IAAmBN,YAAY,CAACM,IAAD,CAAZ,KAAuB,QAAjD;AACA;AAED,OAAO,SAASM,kBAAT,CACNN,IADM,EAEqB;EAC3B,OAAOD,SAAS,CAACC,IAAD,CAAT,IAAmBN,YAAY,CAACM,IAAD,CAAZ,KAAuB,OAAjD;AACA;AAED,OAAO,SAASO,qBAAT,CACNP,IADM,EAEwB;EAC9B,OAAOD,SAAS,CAACC,IAAD,CAAT,IAAmBN,YAAY,CAACM,IAAD,CAAZ,KAAuB,UAAjD;AACA;AAED,OAAO,SAASQ,UAAT,CAAoBR,IAApB,EAAwC;EAAA,WAE7CA,IAAI,CAACS,aAAL,KAAuB,IAAvB,GAA+BT,IAA/B,GAAmDA,IAAI,CAACS,aAFX;IACtCC,WADsC,QACtCA,WADsC;EAI9C,IAAIA,WAAW,KAAK,IAApB,EAA0B;IACzB,MAAM,IAAIC,SAAJ,CAAc,qBAAd,CAAN;EACA;EACD,OAAOD,WAAP;AACA;AAED,OAAO,SAASE,qBAAT,CACNZ,IADM,EAEwB;EAC9B,OAAOD,SAAS,CAACC,IAAD,CAAT,IAAmBN,YAAY,CAACM,IAAD,CAAZ,KAAuB,UAAjD;AACA;AAED,OAAO,SAASa,mBAAT,CACNb,IADM,EAEsB;EAC5B,OAAOD,SAAS,CAACC,IAAD,CAAT,IAAmBN,YAAY,CAACM,IAAD,CAAZ,KAAuB,QAAjD;AACA;AAED,OAAO,SAASc,iBAAT,CAA2Bd,IAA3B,EAAuE;EAC7E,OAAOD,SAAS,CAACC,IAAD,CAAT,IAAmBN,YAAY,CAACM,IAAD,CAAZ,KAAuB,MAAjD;AACA;AAED,OAAO,SAASe,YAAT,CAAsBf,IAAtB,EAA6D;EACnE,OAAOD,SAAS,CAACC,IAAD,CAAT,IAAoBA,IAAD,CAAqBgB,eAArB,KAAyCC,SAAnE;AACA;AAED,OAAO,SAASC,eAAT,CAAyBlB,IAAzB,EAAmE;EACzE,OAAOD,SAAS,CAACC,IAAD,CAAT,IAAmBN,YAAY,CAACM,IAAD,CAAZ,KAAuB,KAAjD;AACA;AAED,OAAO,SAASmB,iBAAT,CAA2BnB,IAA3B,EAAuE;EAC7E,OAAOe,YAAY,CAACf,IAAD,CAAZ,IAAsBN,YAAY,CAACM,IAAD,CAAZ,KAAuB,OAApD;AACA;AAED;;;;;;;AAMA,OAAO,SAASoB,WAAT,CAAqBpB,IAArB,EAAiCqB,aAAjC,EAAmE;EACzE,IAAItB,SAAS,CAACC,IAAD,CAAT,IAAmBA,IAAI,CAACsB,YAAL,CAAkBD,aAAlB,CAAvB,EAAyD;IACxD;IACA,IAAME,GAAG,GAAGvB,IAAI,CAACwB,YAAL,CAAkBH,aAAlB,EAAkCI,KAAlC,CAAwC,GAAxC,CAAZ;IAEA,OAAOF,GAAG,CACRG,GADK,CACD,UAACC,EAAD;MAAA,OAAQ3B,IAAI,CAACS,aAAL,CAAmBmB,cAAnB,CAAkCD,EAAlC,CAAR;IAAA,CADC,EAELE,MAFK,CAGL,UAAClC,OAAD;MAAA,OAAiDA,OAAO,KAAK,IAA7D;IAAA,CAHK,CAIL;IAAA,CAJF;EAMA;;EAED,OAAO,EAAP;AACA;AAED,OAAO,SAASmC,mBAAT,CACN9B,IADM,EAEN+B,KAFM,EAGY;EAClB,IAAIhC,SAAS,CAACC,IAAD,CAAb,EAAqB;IACpB,OAAO+B,KAAK,CAACC,OAAN,CAAcvC,OAAO,CAACO,IAAD,CAArB,MAAiC,CAAC,CAAzC;EACA;EACD,OAAO,KAAP;AACA","names":["getRole","getLocalName","element","localName","tagName","toLowerCase","isElement","node","nodeType","ELEMENT_NODE","isHTMLTableCaptionElement","isHTMLInputElement","isHTMLSelectElement","isHTMLTableElement","isHTMLTextAreaElement","safeWindow","ownerDocument","defaultView","TypeError","isHTMLFieldSetElement","isHTMLLegendElement","isHTMLSlotElement","isSVGElement","ownerSVGElement","undefined","isSVGSVGElement","isSVGTitleElement","queryIdRefs","attributeName","hasAttribute","ids","getAttribute","split","map","id","getElementById","filter","hasAnyConcreteRoles","roles","indexOf"],"sources":["../sources/util.ts"],"sourcesContent":["import getRole from \"./getRole\";\n\n/**\n * Safe Element.localName for all supported environments\n * @param element\n */\nexport function getLocalName(element: Element): string {\n\treturn (\n\t\t// eslint-disable-next-line no-restricted-properties -- actual guard for environments without localName\n\t\telement.localName ??\n\t\t// eslint-disable-next-line no-restricted-properties -- required for the fallback\n\t\telement.tagName.toLowerCase()\n\t);\n}\n\nexport function isElement(node: Node | null): node is Element {\n\treturn node !== null && node.nodeType === node.ELEMENT_NODE;\n}\n\nexport function isHTMLTableCaptionElement(\n\tnode: Node | null\n): node is HTMLTableCaptionElement {\n\treturn isElement(node) && getLocalName(node) === \"caption\";\n}\n\nexport function isHTMLInputElement(\n\tnode: Node | null\n): node is HTMLInputElement {\n\treturn isElement(node) && getLocalName(node) === \"input\";\n}\n\nexport function isHTMLSelectElement(\n\tnode: Node | null\n): node is HTMLSelectElement {\n\treturn isElement(node) && getLocalName(node) === \"select\";\n}\n\nexport function isHTMLTableElement(\n\tnode: Node | null\n): node is HTMLTableElement {\n\treturn isElement(node) && getLocalName(node) === \"table\";\n}\n\nexport function isHTMLTextAreaElement(\n\tnode: Node | null\n): node is HTMLTextAreaElement {\n\treturn isElement(node) && getLocalName(node) === \"textarea\";\n}\n\nexport function safeWindow(node: Node): Window {\n\tconst { defaultView } =\n\t\tnode.ownerDocument === null ? (node as Document) : node.ownerDocument;\n\n\tif (defaultView === null) {\n\t\tthrow new TypeError(\"no window available\");\n\t}\n\treturn defaultView;\n}\n\nexport function isHTMLFieldSetElement(\n\tnode: Node | null\n): node is HTMLFieldSetElement {\n\treturn isElement(node) && getLocalName(node) === \"fieldset\";\n}\n\nexport function isHTMLLegendElement(\n\tnode: Node | null\n): node is HTMLLegendElement {\n\treturn isElement(node) && getLocalName(node) === \"legend\";\n}\n\nexport function isHTMLSlotElement(node: Node | null): node is HTMLSlotElement {\n\treturn isElement(node) && getLocalName(node) === \"slot\";\n}\n\nexport function isSVGElement(node: Node | null): node is SVGElement {\n\treturn isElement(node) && (node as SVGElement).ownerSVGElement !== undefined;\n}\n\nexport function isSVGSVGElement(node: Node | null): node is SVGSVGElement {\n\treturn isElement(node) && getLocalName(node) === \"svg\";\n}\n\nexport function isSVGTitleElement(node: Node | null): node is SVGTitleElement {\n\treturn isSVGElement(node) && getLocalName(node) === \"title\";\n}\n\n/**\n *\n * @param {Node} node -\n * @param {string} attributeName -\n * @returns {Element[]} -\n */\nexport function queryIdRefs(node: Node, attributeName: string): Element[] {\n\tif (isElement(node) && node.hasAttribute(attributeName)) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- safe due to hasAttribute check\n\t\tconst ids = node.getAttribute(attributeName)!.split(\" \");\n\n\t\treturn ids\n\t\t\t.map((id) => node.ownerDocument.getElementById(id))\n\t\t\t.filter(\n\t\t\t\t(element: Element | null): element is Element => element !== null\n\t\t\t\t// TODO: why does this not narrow?\n\t\t\t) as Element[];\n\t}\n\n\treturn [];\n}\n\nexport function hasAnyConcreteRoles(\n\tnode: Node,\n\troles: Array<string | null>\n): node is Element {\n\tif (isElement(node)) {\n\t\treturn roles.indexOf(getRole(node)) !== -1;\n\t}\n\treturn false;\n}\n"]},"metadata":{},"sourceType":"module"}